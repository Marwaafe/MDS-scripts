dim(background.adt.mtx)
[1] 126   0
> sum(is.na(background.adt.mtx))
[1] 0
> summary(Matrix::colSums(background.adt.mtx))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 

rownames(cell.adt.raw)
  [1] "CD86.1"      "CD274.1"     "TNFRSF14.1"  "PVR.1"       "NECTIN2.1"   "CD47.1"      "CD48.1"      "CD40.1"     
  [9] "CD40LG.1"    "CD52.1"      "CD3D.1"      "CD8A.1"      "NCAM1.1"     "CD19.1"      "CD33.1"      "ITGAX.1"    
 [17] "HLA-A.1"     "PTPRC.1"     "IL3RA.1"     "CD7.1"       "ENG.1"       "ITGA6.1"     "CCR4.1"      "CD4.1"      
 [25] "CD44.1"      "CD14.1"      "FCGR3A.1"    "IL2RA.1"     "PTPRC.2"     "PDCD1.1"     "TIGIT.1"     "MS4A1.1"    
 [33] "NCR1.1"      "PECAM1.1"    "MCAM.1"      "IGHM.1"      "CD5.1"       "CXCR3.1"     "CCR5.1"      "FCGR2A.1"   
 [41] "CCR6.1"      "CXCR5.1"     "ITGAE.1"     "CD69.1"      "SELL.1"      "KLRB1.1"     "CTLA4.1"     "LAG3.1"     
 [49] "KLRG1.1"     "CD27.1"      "LAMP1.1"     "FAS.1"       "TNFRSF4.1"   "HLA-DRA.1"   "CD1C.1"      "ITGAM.1"    
 [57] "FCGR1A.1"    "THBD.1"      "CD1D.1"      "KLRK1.1"     "CR1.1"       "B3GAT1.1"    "BTLA.1"      "ICOS.1"     
 [65] "CD58.1"      "ENTPD1.1"    "CX3CR1.1"    "CD24.1"      "CR2.1"       "ITGAL.1"     "CD79B.1"     "CD244.1"    
 [73] "SIGLEC1.1"   "ITGB7.1"     "TNFRSF13C.1" "GP1BB.1"     "ICAM1.1"     "SELP.1"      "IFNGR1.1"    "IL2RB.1"    
 [81] "TNFRSF13B.1" "FCER1A.1"    "ITGA2B.1"    "TNFRSF9.1"   "CD163.1"     "CD83.1"      "IL4R.1"      "ANPEP.1"    
 [89] "CD2.1"       "CD226.1"     "ITGB1.1"     "CLEC4C.1"    "ITGA2.1"     "CD81.1"      "IGHD.1"      "ITGB2.1"    
 [97] "CD28.1"      "CD38.1"      "IL7R.1"      "PTPRC.3"     "CD22.1"      "TFRC.1"      "DPP4.1"      "CD36.1"     
[105] "KIR2DL1.1"   "ITGA1.1"     "ITGA4.1"     "NT5E.1"      "OLR1.1"      "KIR2DL3.1"   "KIR3DL1.1"   "SLAMF7.1"   
[113] "CD99.1"      "CLEC12A.1"   "SLAMF6.1"    "KLRD1.1"     "IGKC.1"      "LILRB1.1"    "FCER2.1"     "SIGLEC7.1"  
[121] "ADGRG1.1"    "HLA-E.1"     "CD82.1"      "CD101.1"     "C5AR1.1"     "GGT1.2"     

# Load libraries
library(Seurat)
library(Matrix)
library(ggplot2)
library(patchwork)
library(dsb)
library(ComplexHeatmap)
library(circlize)
library(dplyr)

# Define paths
sample_name <- "MDS005-09-247"
raw_path <- file.path(
  "/trinity/home/mafechkar",
  "MDS_OUTS_CellRangerCount_9.0",
  paste0(sample_name, "_count_output"),
  paste0(sample_name, "_count"),
  "outs",
  "raw_feature_bc_matrix"
)
filtered_path <- file.path(
  "/trinity/home/mafechkar",
  "MDS_OUTS_CellRangerCount_9.0",
  paste0(sample_name, "_count_output"),
  paste0(sample_name, "_count"),
  "outs",
  "filtered_feature_bc_matrix"
)

# Load data
raw <- Read10X(raw_path)
cells <- Read10X(filtered_path)

# Separate barcodes
stained_cells <- colnames(cells$`Gene Expression`)
background <- setdiff(colnames(raw$`Gene Expression`), stained_cells)

# Split modalities
prot <- raw$`Antibody Capture`
rna <- raw$`Gene Expression`

# Create metadata for QC
mtgene <- grep(pattern = "^MT-", rownames(rna), value = TRUE)
md <- data.frame(
  rna.size = log10(Matrix::colSums(rna)),
  prot.size = log10(Matrix::colSums(prot)),
  n.gene = Matrix::colSums(rna > 0),
  mt.prop = Matrix::colSums(rna[mtgene, ]) / Matrix::colSums(rna)
)
md$drop.class <- ifelse(rownames(md) %in% stained_cells, 'cell', 'background')
md <- md[md$rna.size > 0 & md$prot.size > 0, ]

# Define background droplets
background_drops <- rownames(
  md[
    md$prot.size > 1.0 & 
    md$prot.size < 4.0 & 
    md$rna.size < 3.0, 
  ]
)
background.adt.mtx <- as.matrix(prot[, background_drops])

# QC cells
cellmd <- md[md$drop.class == 'cell', ]
rna.mult <- (3*mad(cellmd$rna.size))
prot.mult <- (3*mad(cellmd$prot.size))
rna.lower <- median(cellmd$rna.size) - rna.mult
rna.upper <- median(cellmd$rna.size) + rna.mult
prot.lower <- median(cellmd$prot.size) - prot.mult
prot.upper <- median(cellmd$prot.size) + prot.mult

qc_cells <- rownames(cellmd[cellmd$prot.size > prot.lower & 
                              cellmd$prot.size < prot.upper & 
                              cellmd$rna.size > rna.lower & 
                              cellmd$rna.size < rna.upper & 
                              cellmd$mt.prop < 0.14, ])

# Subset matrices
cell.adt.raw <- as.matrix(prot[, qc_cells])
cell.rna.raw <- rna[, qc_cells]
cellmd <- cellmd[qc_cells, ]

# Remove 'nan' features
cell.adt.raw <- cell.adt.raw[!grepl("^nan", rownames(cell.adt.raw)), ]
background.adt.mtx <- background.adt.mtx[rownames(cell.adt.raw), ]

# Normalize ADT with DSB
cells.dsb.norm <- DSBNormalizeProtein(
  cell_protein_matrix = cell.adt.raw,
  empty_drop_matrix = background.adt.mtx,
  denoise.counts = TRUE,
  use.isotype.control = FALSE  # <---- IMPORTANT
)


# Create Seurat object
s <- CreateSeuratObject(counts = cell.rna.raw, meta.data = cellmd)
s[["ADT"]] <- CreateAssayObject(data = cells.dsb.norm)

# Cluster based on ADT
DefaultAssay(s) <- "ADT"
VariableFeatures(s) <- rownames(s[["ADT"]])
s <- FindNeighbors(object = s, dims = NULL, assay = "ADT", features = VariableFeatures(s))
s <- FindClusters(object = s, resolution = 1, algorithm = 3, graph.name = "ADT_snn")

# Identify RNA markers
DefaultAssay(s) <- "RNA"
Idents(s) <- "ADT_snn_res.1"
s <- NormalizeData(s)
s <- FindVariableFeatures(s)
s <- ScaleData(s)
rna_markers <- FindAllMarkers(s, only.pos = TRUE, verbose = FALSE)
top_genes <- rna_markers %>% 
  dplyr::filter(avg_log2FC > 1) %>%
  dplyr::group_by(cluster) %>%
  dplyr::top_n(n = 3, wt = avg_log2FC) %>%
  dplyr::pull(gene) %>%
  unique()

# Aggregate expression by cluster
adt_data <- t(GetAssayData(s, assay = "ADT", slot = "data"))
rna_data <- t(GetAssayData(s, assay = "RNA", slot = "data")[top_genes, ])
df <- cbind(s@meta.data, adt_data, rna_data)

heatmap_data <- df %>%
  dplyr::group_by(ADT_snn_res.1) %>%
  dplyr::summarize(across(where(is.numeric), median)) %>%
  tibble::column_to_rownames("ADT_snn_res.1")

# Plot combined heatmap
adt_features <- rownames(s[["ADT"]])
protein_data <- t(heatmap_data[, adt_features])
rna_data_scaled <- t(scale(t(heatmap_data[, top_genes])))

prot_col <- circlize::colorRamp2(seq(0, 30, by = 1), viridis::viridis(31, option = "B"))
rna_col <- circlize::colorRamp2(c(-2, -1, 0, 1, 2), colorspace::diverge_hsv(n = 5))

h1 <- Heatmap(protein_data, name = "protein", col = prot_col, row_names_gp = gpar(fontsize = 6), use_raster = TRUE)
h2 <- Heatmap(rna_data_scaled, name = "mRNA", col = rna_col, row_names_gp = gpar(fontsize = 6), use_raster = TRUE)

draw(h1 %v% h2)
