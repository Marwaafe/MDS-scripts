 rownames(seurat_obj[["ADT"]])[1:20]
 [1] "CD86.1"     "CD274.1"    "TNFRSF14.1" "PVR.1"      "NECTIN2.1"  "CD47.1"     "CD48.1"     "CD40.1"     "CD40LG.1"  
[10] "CD52.1"     "CD3D.1"     "CD8A.1"     "NCAM1.1"    "CD19.1"     "CD33.1"     "ITGAX.1"    "HLA-A.1"    "PTPRC.1"   
[19] "IL3RA.1"    "CD7.1"  

# Step 0: Load libraries
library(Seurat)
library(Matrix)
library(ggplot2)
library(patchwork)

# Step 1: Set sample name and file path
sample_name <- "MDS005-09-247"
data_path <- file.path(
  "/trinity/home/mafechkar",
  "ALL_MDS_OUTS_CellRangerCount_9.0",
  paste0(sample_name, "_count_output"),
  paste0(sample_name, "_count"),
  "outs",
  "raw_feature_bc_matrix.h5"
)

# Step 2: Read multimodal data (RNA + ADT)
data_list <- Read10X_h5(data_path)

# Step 3: Identify barcodes with non-zero ADT counts
adt_raw <- data_list[["Antibody Capture"]]
adt_positive_barcodes <- colnames(adt_raw)[Matrix::colSums(adt_raw) > 0]
cat("Number of ADT-positive cells:", length(adt_positive_barcodes), "\n")

# Step 4: Subset RNA and ADT matrices to ADT-positive barcodes
rna_subset <- data_list[["Gene Expression"]][, adt_positive_barcodes]
adt_subset <- adt_raw[, adt_positive_barcodes]

# Step 5: Create Seurat object from RNA (minimal filtering to preserve rare ADT+ cells)
seurat_obj <- CreateSeuratObject(counts = rna_subset, min.cells = 1, min.features = 1)

# Step 6: Reorder ADT to match Seurat object cell barcodes before adding
adt_subset_ordered <- adt_subset[, colnames(seurat_obj)]
seurat_obj[["ADT"]] <- CreateAssayObject(counts = adt_subset_ordered)

# Step 7: Add mitochondrial percentage (RNA)
DefaultAssay(seurat_obj) <- "RNA"
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")

# Step 8: Add ADT QC metrics manually
seurat_obj$`nCount_ADT` <- Matrix::colSums(seurat_obj[["ADT"]]@counts)
seurat_obj$`nFeature_ADT` <- Matrix::colSums(seurat_obj[["ADT"]]@counts > 0)

# Step 9: Print basic object summary before RNA filtering
cat("Total cells before RNA QC filtering:", ncol(seurat_obj), "\n")
cat("Cells with ADT signal before RNA QC:", sum(seurat_obj$nCount_ADT > 0), "\n")

# Step 10: Apply strict RNA QC filtering as your supervisor recommends
seurat_obj <- subset(
  seurat_obj,
  subset = nFeature_RNA > 200 & nCount_RNA > 500 & percent.mt < 10
)

# Step 11: Print how many cells passed RNA QC and how many still have ADT
cat("Cells after RNA QC filtering:", ncol(seurat_obj), "\n")
cat("ADT+ cells remaining after RNA QC:", sum(seurat_obj$nCount_ADT > 0), "\n")

# Step 12: Normalize RNA
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", assay = "RNA")

# Step 13: Normalize ADT using CLR
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "CLR", margin = 2, assay = "ADT")

# Step 14: Read in the feature reference file
feature_ref <- read.csv("feature_ref.csv", stringsAsFactors = FALSE)

# Extract unique antibody names from the 'name' column (exclude NA/malformed ones)
adt_names <- unique(feature_ref$name)
adt_names <- adt_names[!is.na(adt_names) & adt_names != "nan"]

# Add ".1" to each feature name to match Seurat ADT rownames
adt_features <- paste0(adt_names, ".1")

# Plot each valid ADT feature
adt_data <- GetAssayData(seurat_obj, assay = "ADT", slot = "data")

for (feature in adt_features) {
  if (feature %in% rownames(adt_data)) {
    values <- as.numeric(adt_data[feature, ])
    
    if (all(is.na(values))) {
      message(paste("Skipping", feature, "- all values are NA"))
      next
    }
    if (length(unique(na.omit(values))) <= 1) {
      message(paste("Skipping", feature, "- not enough variation"))
      next
    }

    print(paste("Plotting ADT feature:", feature))
    print(VlnPlot(seurat_obj, features = feature, assay = "ADT", slot = "data") + ggtitle(feature))
  } else {
    message(paste("Skipping", feature, "- not found in ADT assay"))
  }
}

# Step 15: Save the processed Seurat object
saveRDS(seurat_obj, file = paste0(sample_name, "_RNA_ADT_filtered_normalized.rds"))
