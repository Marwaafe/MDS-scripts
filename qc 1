 for (feature in adt_features) {
+     if (feature %in% rownames(adt_data)) {
+         values <- as.numeric(adt_data[feature, ])
+         
+         if (all(is.na(values))) {
+             message(paste("Skipping", feature, "- all values are NA"))
+             next
+         }
+         if (length(unique(na.omit(values))) <= 1) {
+             message(paste("Skipping", feature, "- not enough variation"))
+             next
+         }
+         
+         print(paste("Plotting ADT feature:", feature))
+         print(VlnPlot(seurat_obj, features = feature, assay = "ADT", slot = "data") + ggtitle(feature))
+     } else {
+         message(paste("Skipping", feature, "- not found in ADT assay"))
+     }
+ }
Skipping CD86.1 - not enough variation
Skipping CD274.1 - not enough variation
[1] "Plotting ADT feature: TNFRSF14.1"
[1] "Plotting ADT feature: PVR.1"
Skipping NECTIN2.1 - not enough variation
Skipping CD47.1 - not enough variation
[1] "Plotting ADT feature: CD48.1"
Skipping CD40.1 - not enough variation
[1] "Plotting ADT feature: CD40LG.1"
Skipping CD52.1 - not enough variation
Skipping CD3D.1 - not enough variation
Skipping CD8A.1 - not enough variation
[1] "Plotting ADT feature: NCAM1.1"
Skipping CD19.1 - not enough variation
Skipping CD33.1 - not enough variation
Skipping ITGAX.1 - not enough variation
Skipping HLA-A.1 - not enough variation
[1] "Plotting ADT feature: PTPRC.1"
Skipping IL3RA.1 - not enough variation
Skipping CD7.1 - not enough variation
[1] "Plotting ADT feature: ENG.1"
[1] "Plotting ADT feature: ITGA6.1"
[1] "Plotting ADT feature: CCR4.1"
Skipping CD4.1 - not enough variation
Skipping CD44.1 - not enough variation
Skipping CD14.1 - not enough variation
Skipping FCGR3A.1 - not enough variation
[1] "Plotting ADT feature: IL2RA.1"
[1] "Plotting ADT feature: PDCD1.1"
Skipping TIGIT.1 - not enough variation
Skipping MS4A1.1 - not enough variation
[1] "Plotting ADT feature: NCR1.1"
[1] "Plotting ADT feature: PECAM1.1"
[1] "Plotting ADT feature: MCAM.1"
[1] "Plotting ADT feature: IGHM.1"
[1] "Plotting ADT feature: CD5.1"
[1] "Plotting ADT feature: CXCR3.1"
[1] "Plotting ADT feature: CCR5.1"
[1] "Plotting ADT feature: FCGR2A.1"
Skipping CCR6.1 - not enough variation
[1] "Plotting ADT feature: CXCR5.1"
[1] "Plotting ADT feature: ITGAE.1"
Skipping CD69.1 - not enough variation
Skipping SELL.1 - not enough variation
Skipping KLRB1.1 - not enough variation
[1] "Plotting ADT feature: CTLA4.1"
Skipping LAG3.1 - not enough variation
Skipping KLRG1.1 - not enough variation
Skipping CD27.1 - not enough variation
[1] "Plotting ADT feature: LAMP1.1"
[1] "Plotting ADT feature: FAS.1"
Skipping TNFRSF4.1 - not enough variation
Skipping HLA-DRA.1 - not enough variation
Skipping CD1C.1 - not enough variation
[1] "Plotting ADT feature: ITGAM.1"
Skipping FCGR1A.1 - not enough variation
Skipping THBD.1 - not enough variation
Skipping CD1D.1 - not enough variation
Skipping KLRK1.1 - not enough variation
Skipping CR1.1 - not enough variation
Skipping B3GAT1.1 - not enough variation
Skipping BTLA.1 - not enough variation
[1] "Plotting ADT feature: ICOS.1"
Skipping CD58.1 - not enough variation
[1] "Plotting ADT feature: ENTPD1.1"
Skipping CX3CR1.1 - not enough variation
Skipping CD24.1 - not enough variation
Skipping CR2.1 - not enough variation
Skipping ITGAL.1 - not enough variation
[1] "Plotting ADT feature: CD79B.1"
[1] "Plotting ADT feature: CD244.1"
Skipping SIGLEC1.1 - not enough variation
[1] "Plotting ADT feature: ITGB7.1"
Skipping TNFRSF13C.1 - not enough variation
Skipping GP1BB.1 - not enough variation
[1] "Plotting ADT feature: ICAM1.1"
Skipping SELP.1 - not enough variation
[1] "Plotting ADT feature: IFNGR1.1"
Skipping IL2RB.1 - not enough variation
[1] "Plotting ADT feature: TNFRSF13B.1"
Skipping FCER1A.1 - not enough variation
[1] "Plotting ADT feature: ITGA2B.1"
[1] "Plotting ADT feature: TNFRSF9.1"
Skipping CD163.1 - not enough variation
[1] "Plotting ADT feature: CD83.1"
Skipping IL4R.1 - not enough variation
Skipping ANPEP.1 - not enough variation
Skipping CD2.1 - not enough variation
[1] "Plotting ADT feature: CD226.1"
[1] "Plotting ADT feature: ITGB1.1"
Skipping CLEC4C.1 - not enough variation
Skipping ITGA2.1 - not enough variation
Skipping CD81.1 - not enough variation
Skipping IGHD.1 - not enough variation
[1] "Plotting ADT feature: ITGB2.1"
[1] "Plotting ADT feature: CD28.1"
[1] "Plotting ADT feature: CD38.1"
Skipping IL7R.1 - not enough variation
[1] "Plotting ADT feature: CD22.1"
[1] "Plotting ADT feature: TFRC.1"
Skipping DPP4.1 - not enough variation
Skipping CD36.1 - not enough variation
[1] "Plotting ADT feature: KIR2DL1.1"
[1] "Plotting ADT feature: ITGA1.1"
[1] "Plotting ADT feature: ITGA4.1"
Skipping NT5E.1 - not enough variation
[1] "Plotting ADT feature: OLR1.1"
[1] "Plotting ADT feature: KIR2DL3.1"
Skipping KIR3DL1.1 - not enough variation
[1] "Plotting ADT feature: SLAMF7.1"
Skipping CD99.1 - not enough variation
Skipping CLEC12A.1 - not enough variation
Skipping SLAMF6.1 - not enough variation
[1] "Plotting ADT feature: KLRD1.1"
Skipping IGKC.1 - not enough variation
[1] "Plotting ADT feature: LILRB1.1"
Skipping FCER2.1 - not enough variation
Skipping SIGLEC7.1 - not enough variation
Skipping ADGRG1.1 - not enough variation
[1] "Plotting ADT feature: HLA-E.1"
Skipping CD82.1 - not enough variation
Skipping CD101.1 - not enough variation
[1] "Plotting ADT feature: C5AR1.1"
Skipping GGT1.1 - not found in ADT assay
Skipping CD34.1 - not found in ADT assay
Skipping CD159a.1 - not found in ADT assay
Skipping CD117.1 - not found in ADT assay
Warning message:
The `slot` argument of `VlnPlot()` is deprecated as of Seurat 5.0.0.
â„¹ Please use the `layer` argument instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.  

# Step 0: Load libraries
library(Seurat)
library(Matrix)
library(ggplot2)
library(patchwork)

# Step 1: Set sample name and file path
sample_name <- "MDS005-09-247"
data_path <- file.path(
  "/trinity/home/mafechkar",
  "ALL_MDS_OUTS_CellRangerCount_9.0",
  paste0(sample_name, "_count_output"),
  paste0(sample_name, "_count"),
  "outs",
  "raw_feature_bc_matrix.h5"
)

# Step 2: Read multimodal data (RNA + ADT)
data_list <- Read10X_h5(data_path)

# Step 3: Identify barcodes with non-zero ADT counts
adt_raw <- data_list[["Antibody Capture"]]
adt_positive_barcodes <- colnames(adt_raw)[Matrix::colSums(adt_raw) > 0]
cat("Number of ADT-positive cells:", length(adt_positive_barcodes), "\n")

# Step 4: Subset RNA and ADT matrices to ADT-positive barcodes
rna_subset <- data_list[["Gene Expression"]][, adt_positive_barcodes]
adt_subset <- adt_raw[, adt_positive_barcodes]

# Step 5: Create Seurat object from RNA (minimal filtering to preserve rare ADT+ cells)
seurat_obj <- CreateSeuratObject(counts = rna_subset, min.cells = 1, min.features = 1)

# Step 6: Reorder ADT to match Seurat object cell barcodes before adding
adt_subset_ordered <- adt_subset[, colnames(seurat_obj)]
seurat_obj[["ADT"]] <- CreateAssayObject(counts = adt_subset_ordered)

# Step 7: Add mitochondrial percentage (RNA)
DefaultAssay(seurat_obj) <- "RNA"
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")

# Step 8: Add ADT QC metrics manually
seurat_obj$`nCount_ADT` <- Matrix::colSums(seurat_obj[["ADT"]]@counts)
seurat_obj$`nFeature_ADT` <- Matrix::colSums(seurat_obj[["ADT"]]@counts > 0)

# Step 9: Print basic object summary before RNA filtering
cat("Total cells before RNA QC filtering:", ncol(seurat_obj), "\n")
cat("Cells with ADT signal before RNA QC:", sum(seurat_obj$nCount_ADT > 0), "\n")

# Step 10: Apply strict RNA QC filtering as your supervisor recommends
seurat_obj <- subset(
  seurat_obj,
  subset = nFeature_RNA > 200 & nCount_RNA > 500 & percent.mt < 10
)

# Step 11: Print how many cells passed RNA QC and how many still have ADT
cat("Cells after RNA QC filtering:", ncol(seurat_obj), "\n")
cat("ADT+ cells remaining after RNA QC:", sum(seurat_obj$nCount_ADT > 0), "\n")

# Step 12: Normalize RNA
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "LogNormalize", assay = "RNA")

# Step 13: Normalize ADT using CLR
seurat_obj <- NormalizeData(seurat_obj, normalization.method = "CLR", margin = 2, assay = "ADT")

# Step 14: Read in the feature reference file
feature_ref <- read.csv("feature_ref.csv", stringsAsFactors = FALSE)

# Extract unique antibody names from the 'name' column (exclude NA/malformed ones)
adt_names <- unique(feature_ref$name)
adt_names <- adt_names[!is.na(adt_names) & adt_names != "nan"]

# Add ".1" to each feature name to match Seurat ADT rownames
adt_features <- paste0(adt_names, ".1")

# Plot each valid ADT feature
adt_data <- GetAssayData(seurat_obj, assay = "ADT", slot = "data")

for (feature in adt_features) {
  if (feature %in% rownames(adt_data)) {
    values <- as.numeric(adt_data[feature, ])
    
    if (all(is.na(values))) {
      message(paste("Skipping", feature, "- all values are NA"))
      next
    }
    if (length(unique(na.omit(values))) <= 1) {
      message(paste("Skipping", feature, "- not enough variation"))
      next
    }

    print(paste("Plotting ADT feature:", feature))
    print(VlnPlot(seurat_obj, features = feature, assay = "ADT", slot = "data") + ggtitle(feature))
  } else {
    message(paste("Skipping", feature, "- not found in ADT assay"))
  }
}

# Step 15: Save the processed Seurat object
saveRDS(seurat_obj, file = paste0(sample_name, "_RNA_ADT_filtered_normalized.rds"))
